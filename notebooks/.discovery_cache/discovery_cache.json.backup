{
  "repositories": {
    "frontend": {
      "name": "frontend",
      "path": "frontend",
      "discovery_phase_status": "Insights added. Assigned to components: consultation-service.",
      "last_analyzed": null,
      "total_files": 5,
      "file_counts": {
        ".json": 2,
        ".js": 1,
        "": 1,
        ".md": 1
      },
      "total_lines": 1251,
      "technology_stack": {
        "frameworks": [
          "Express.js"
        ]
      },
      "repository_type": "documentation",
      "has_readme": true,
      "config_files": [
        "package.json",
        "Dockerfile"
      ],
      "insights": {
        "purpose": "Express-based Node.js proxy for consultation analyser UI and API requests",
        "business_function": "Serve static frontend assets and proxy API calls/health checks to backend consultation service",
        "architecture": "Node.js Express server using http-proxy-middleware, static file serving, configurable via environment variables",
        "key_dependencies": [
          "express",
          "http-proxy-middleware"
        ],
        "notes": "Acts as frontend gateway; minimal application logic"
      },
      "assigned_components": [
        "consultation-service"
      ]
    },
    "docs": {
      "name": "docs",
      "path": "docs",
      "discovery_phase_status": "Insights added. Assigned to components: consultation-service.",
      "last_analyzed": null,
      "total_files": 7,
      "file_counts": {
        ".png": 1,
        ".md": 6
      },
      "total_lines": 1745,
      "technology_stack": {
        "frameworks": []
      },
      "repository_type": "documentation",
      "has_readme": false,
      "config_files": [],
      "insights": {
        "purpose": "Documentation repository containing architecture decisions, ERD diagrams, and guidelines",
        "business_function": "Provide architectural and design guidance for the system",
        "architecture": "Markdown files and images (PNG) structured into decision records and guides",
        "key_dependencies": [],
        "notes": "Includes architecture/decisions directory and entity-relationship diagrams"
      },
      "assigned_components": [
        "consultation-service"
      ]
    },
    "infrastructure": {
      "name": "infrastructure",
      "path": "infrastructure",
      "discovery_phase_status": "Insights added. Assigned to components: platform-infrastructure.",
      "last_analyzed": null,
      "total_files": 21,
      "file_counts": {
        ".tf": 18,
        ".md": 1,
        ".png": 1,
        ".sh": 1
      },
      "total_lines": 4287,
      "technology_stack": {
        "frameworks": [
          "Terraform"
        ]
      },
      "repository_type": "unknown",
      "has_readme": true,
      "config_files": [],
      "insights": {
        "purpose": "Infrastructure as code repository defining AWS resources for the application",
        "business_function": "Provisioning and managing cloud infrastructure (ECS, RDS, S3, Batch, networking, etc.)",
        "architecture": "Terraform configuration files organized by resource type; includes CI/CD scripts and documentation",
        "key_dependencies": [
          "Terraform",
          "AWS CLI"
        ],
        "notes": "Includes scripts folder, universal configs, and architecture diagrams in README"
      },
      "assigned_components": [
        "platform-infrastructure"
      ]
    },
    "lambda": {
      "name": "lambda",
      "path": "lambda",
      "discovery_phase_status": "Insights added. Assigned to components: platform-infrastructure.",
      "last_analyzed": null,
      "total_files": 2,
      "file_counts": {
        ".py": 2
      },
      "total_lines": 253,
      "technology_stack": {
        "frameworks": []
      },
      "repository_type": "unknown",
      "has_readme": false,
      "config_files": [],
      "insights": {
        "purpose": "AWS Lambda functions to orchestrate background processing and notifications",
        "business_function": "Submit jobs to AWS Batch and send Slack notifications based on events",
        "architecture": "Python functions using boto3 clients for AWS Batch and Slack API, triggered via SQS events",
        "key_dependencies": [
          "boto3",
          "json",
          "logging"
        ],
        "notes": "Includes two handlers: submit_batch_job.py and slack_notifier.py"
      },
      "assigned_components": [
        "platform-infrastructure"
      ]
    },
    "migration_tests": {
      "name": "migration_tests",
      "path": "migration_tests",
      "discovery_phase_status": "Insights added. Assigned to components: consultation-service.",
      "last_analyzed": null,
      "total_files": 3,
      "file_counts": {
        ".py": 3
      },
      "total_lines": 129,
      "technology_stack": {
        "frameworks": []
      },
      "repository_type": "unknown",
      "has_readme": false,
      "config_files": [],
      "insights": {
        "purpose": "Database migration tests for Django models of consultation application",
        "business_function": "Validate correctness of database schema migrations applied to consultation_analyser models",
        "architecture": "Pytest-based migration tests using django-test-migrations library",
        "key_dependencies": [
          "pytest",
          "django-test-migrations"
        ],
        "notes": "Tests cover migrations in authentication and consultations apps"
      },
      "assigned_components": [
        "consultation-service"
      ]
    },
    "pipeline-mapping": {
      "name": "pipeline-mapping",
      "path": "pipeline-mapping",
      "discovery_phase_status": "Insights added. Assigned to components: ai-processing-pipelines.",
      "last_analyzed": null,
      "total_files": 3,
      "file_counts": {
        "": 1,
        ".py": 1,
        ".txt": 1
      },
      "total_lines": 212,
      "technology_stack": {
        "frameworks": []
      },
      "repository_type": "documentation",
      "has_readme": false,
      "config_files": [
        "requirements.txt",
        "Dockerfile"
      ],
      "insights": {
        "purpose": "CLI script for mapping consultation responses to themes using AI",
        "business_function": "Download consultation data from S3, run detail detection and theme mapping via Azure OpenAI, and upload results back to S3",
        "architecture": "Python script using boto3 for S3 interactions, pandas for data handling, and AzureChatOpenAI via LangChain for AI workflows",
        "key_dependencies": [
          "boto3",
          "pandas",
          "langchain_openai",
          "themefinder"
        ],
        "notes": "Invoked as CLI with subdir parameter; part of data processing pipeline"
      },
      "assigned_components": [
        "ai-processing-pipelines"
      ]
    },
    "pipeline-sign-off": {
      "name": "pipeline-sign-off",
      "path": "pipeline-sign-off",
      "discovery_phase_status": "Insights added. Assigned to no components.",
      "last_analyzed": null,
      "total_files": 3,
      "file_counts": {
        ".py": 1,
        "": 1,
        ".txt": 1
      },
      "total_lines": 367,
      "technology_stack": {
        "frameworks": []
      },
      "repository_type": "documentation",
      "has_readme": false,
      "config_files": [
        "requirements.txt",
        "Dockerfile"
      ],
      "insights": {
        "purpose": "CLI script for orchestrating pipeline sign-offs using AI and data processing",
        "business_function": "Download consultation data, perform theme generation/refinement/condensation, and sign off processes via AI workflows",
        "architecture": "Python script using boto3 for S3 interactions, pandas, LangChain AzureChatOpenAI, and themefinder modules",
        "key_dependencies": [
          "boto3",
          "pandas",
          "langchain_openai",
          "themefinder"
        ],
        "notes": "Similar structure to pipeline-mapping, focuses on theme processing workflows"
      },
      "assigned_components": []
    },
    "legacy-frontend": {
      "name": "legacy-frontend",
      "path": "legacy-frontend",
      "discovery_phase_status": "Insights added. Assigned to components: consultation-service.",
      "last_analyzed": null,
      "total_files": 43,
      "file_counts": {
        ".scss": 2,
        ".json": 1,
        ".ttf": 9,
        ".map": 4,
        ".js": 11,
        ".css": 2,
        ".svg": 14
      },
      "total_lines": 27093,
      "technology_stack": {
        "frameworks": []
      },
      "repository_type": "unknown",
      "has_readme": false,
      "config_files": [],
      "insights": {
        "purpose": "Legacy static frontend assets for the consultation application",
        "business_function": "Provides original UI components, styles, scripts, and assets for the monolithic application",
        "architecture": "Static files organized into directories for debug toolbar, govuk-js, SCSS, fonts, scripts; uses SCSS compilation",
        "key_dependencies": [],
        "notes": "No build scripts detected; assets likely managed by Django collectstatic"
      },
      "assigned_components": [
        "consultation-service"
      ]
    },
    "tests": {
      "name": "tests",
      "path": "tests",
      "discovery_phase_status": "Insights added. Assigned to components: consultation-service.",
      "last_analyzed": null,
      "total_files": 52,
      "file_counts": {
        ".py": 51,
        ".yml": 1
      },
      "total_lines": 4554,
      "technology_stack": {
        "frameworks": []
      },
      "repository_type": "unknown",
      "has_readme": false,
      "config_files": [],
      "insights": {
        "purpose": "Comprehensive test suite for consultation analyser application",
        "business_function": "Provide unit, integration, and example tests across API, models, views, and request handling",
        "architecture": "Python pytest-based tests organized into unit, integration, request, and view tests with fixtures and helpers",
        "key_dependencies": [
          "pytest",
          "Django test utilities"
        ],
        "notes": "Includes conftest.py and helpers for common test setup"
      },
      "assigned_components": [
        "consultation-service"
      ]
    },
    "consultation_analyser": {
      "name": "consultation_analyser",
      "path": "consultation_analyser",
      "discovery_phase_status": "Insights added. Assigned to components: consultation-service.",
      "last_analyzed": null,
      "total_files": 287,
      "file_counts": {
        ".py": 129,
        ".html": 38,
        ".md": 1,
        ".js": 48,
        ".mjs": 64,
        ".json": 7
      },
      "total_lines": 20273,
      "technology_stack": {
        "frameworks": []
      },
      "repository_type": "unknown",
      "has_readme": false,
      "config_files": [],
      "insights": {
        "purpose": "Django-based monolithic web application for consultation management, providing REST APIs and web UI.",
        "business_function": "Manage creation, processing, and analysis of consultations",
        "architecture": "Python Django monolith with Jinja2 templates, PostgreSQL database, migrations, ASGI/WSGI entrypoints",
        "key_dependencies": [
          "Django",
          "simple_history",
          "psycopg2",
          "Boto3"
        ],
        "notes": "Large codebase with extensive database migrations, settings for multiple environments, and support console UI"
      },
      "assigned_components": [
        "consultation-service"
      ]
    }
  },
  "components": {
    "consultation-service": {
      "name": "consultation-service",
      "purpose": "Core consultation management monolith including business logic, UI assets, tests, and documentation",
      "rationale": "Groups monolithic Django application (consultation_analyser), its legacy frontend assets, associated test suites, migration tests for database schema, and documentation to represent the core system",
      "repositories": [
        "consultation_analyser",
        "legacy-frontend",
        "docs",
        "tests",
        "migration_tests",
        "frontend"
      ],
      "created_at": "2025-08-13T00:45:53.476271"
    },
    "platform-infrastructure": {
      "name": "platform-infrastructure",
      "purpose": "Cloud platform infrastructure including provisioning and serverless functions",
      "rationale": "Groups Terraform-based infrastructure code and AWS Lambda function implementations which operate at the platform layer",
      "repositories": [
        "infrastructure",
        "lambda"
      ],
      "created_at": "2025-08-13T00:46:19.471093"
    },
    "ai-processing-pipelines": {
      "name": "ai-processing-pipelines",
      "purpose": "AI-driven data processing pipelines for consultation analysis",
      "rationale": "Groups scripts that download consultation data, perform theme detection/mapping and sign-off workflows using AI services",
      "repositories": [
        "pipeline-mapping"
      ],
      "created_at": "2025-08-13T00:46:28.519048"
    }
  },
  "total_repositories": 10,
  "repositories_with_insights": 10,
  "analysis_started": "2025-08-13T00:35:29.768080",
  "analysis_completed": "2025-08-13T00:35:30.140544",
  "last_updated": "2025-08-13T00:48:28.023051",
  "base_repos_path": "/home/agangwal/lseg-migration-agent/migration-agent/consult copy/repos"
}